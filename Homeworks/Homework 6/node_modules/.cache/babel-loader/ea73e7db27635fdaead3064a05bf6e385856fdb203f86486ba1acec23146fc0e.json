{"ast":null,"code":"var _jsxFileName = \"/Users/ozturkomerfaruk/Desktop/project6/project6/src/deneme.js\";\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Formik\n} = formik;\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required().oneOf([true], 'Terms must be accepted')\n});\nexport default function FormExample() {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    validationSchema: schema,\n    onSubmit: console.log,\n    initialValues: {\n      firstName: 'Mark',\n      lastName: 'Otto',\n      username: '',\n      city: '',\n      state: '',\n      zip: '',\n      terms: false\n    },\n    children: _ref => {\n      let {\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: \"4\",\n            controlId: \"validationFormik01\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"First name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"firstName\",\n              value: \"deeme\",\n              onChange: handleChange,\n              isValid: touched.firstName && !errors.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              children: \"Looks good!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Submit form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_c = FormExample;\nrender( /*#__PURE__*/_jsxDEV(FormExample, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 8\n}, this));\nvar _c;\n$RefreshReg$(_c, \"FormExample\");","map":{"version":3,"names":["Button","Col","Form","InputGroup","Row","Formik","formik","schema","yup","object","shape","firstName","string","required","lastName","username","city","state","zip","terms","bool","oneOf","FormExample","console","log","handleSubmit","handleChange","handleBlur","values","touched","isValid","errors","render"],"sources":["/Users/ozturkomerfaruk/Desktop/project6/project6/src/deneme.js"],"sourcesContent":["import Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\n\nconst { Formik } = formik;\n\nconst schema = yup.object().shape({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    username: yup.string().required(),\n    city: yup.string().required(),\n    state: yup.string().required(),\n    zip: yup.string().required(),\n    terms: yup.bool().required().oneOf([true], 'Terms must be accepted'),\n});\n\nexport default function FormExample() {\n    return (\n        <Formik\n            validationSchema={schema}\n            onSubmit={console.log}\n            initialValues={{\n                firstName: 'Mark',\n                lastName: 'Otto',\n                username: '',\n                city: '',\n                state: '',\n                zip: '',\n                terms: false,\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                values,\n                touched,\n                isValid,\n                errors,\n            }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationFormik01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"firstName\"\n                                value=\"deeme\"\n                                onChange={handleChange}\n                                isValid={touched.firstName && !errors.firstName}\n                            />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n\n                    <Button type=\"submit\">Submit form</Button>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nrender(<FormExample />);"],"mappings":";AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,GAAG,MAAM,qBAAqB;AAAC;AAEtC,MAAM;EAAEC;AAAO,CAAC,GAAGC,MAAM;AAEzB,MAAMC,MAAM,GAAGC,GAAG,CAACC,MAAM,EAAE,CAACC,KAAK,CAAC;EAC9BC,SAAS,EAAEH,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EAClCC,QAAQ,EAAEN,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCE,QAAQ,EAAEP,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCG,IAAI,EAAER,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EAC7BI,KAAK,EAAET,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EAC9BK,GAAG,EAAEV,GAAG,CAACI,MAAM,EAAE,CAACC,QAAQ,EAAE;EAC5BM,KAAK,EAAEX,GAAG,CAACY,IAAI,EAAE,CAACP,QAAQ,EAAE,CAACQ,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,wBAAwB;AACvE,CAAC,CAAC;AAEF,eAAe,SAASC,WAAW,GAAG;EAClC,oBACI,QAAC,MAAM;IACH,gBAAgB,EAAEf,MAAO;IACzB,QAAQ,EAAEgB,OAAO,CAACC,GAAI;IACtB,aAAa,EAAE;MACXb,SAAS,EAAE,MAAM;MACjBG,QAAQ,EAAE,MAAM;MAChBC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,GAAG,EAAE,EAAE;MACPC,KAAK,EAAE;IACX,CAAE;IAAA,UAED;MAAA,IAAC;QACEM,YAAY;QACZC,YAAY;QACZC,UAAU;QACVC,MAAM;QACNC,OAAO;QACPC,OAAO;QACPC;MACJ,CAAC;MAAA,oBACG,QAAC,IAAI;QAAC,UAAU;QAAC,QAAQ,EAAEN,YAAa;QAAA,wBACpC,QAAC,GAAG;UAAC,SAAS,EAAC,MAAM;UAAA,uBACjB,QAAC,IAAI,CAAC,KAAK;YAAC,EAAE,EAAExB,GAAI;YAAC,EAAE,EAAC,GAAG;YAAC,SAAS,EAAC,oBAAoB;YAAA,wBACtD,QAAC,IAAI,CAAC,KAAK;cAAA,UAAC;YAAU;cAAA;cAAA;cAAA;YAAA,QAAa,eACnC,QAAC,IAAI,CAAC,OAAO;cACT,IAAI,EAAC,MAAM;cACX,IAAI,EAAC,WAAW;cAChB,KAAK,EAAC,OAAO;cACb,QAAQ,EAAEyB,YAAa;cACvB,OAAO,EAAEG,OAAO,CAAClB,SAAS,IAAI,CAACoB,MAAM,CAACpB;YAAU;cAAA;cAAA;cAAA;YAAA,QAClD,eACF,QAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;cAAA,UAAC;YAAW;cAAA;cAAA;cAAA;YAAA,QAAwB;UAAA;YAAA;YAAA;YAAA;UAAA;QACjD;UAAA;UAAA;UAAA;QAAA,QACX,eAEN,QAAC,MAAM;UAAC,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAW;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACvC;IAAA;EACV;IAAA;IAAA;IAAA;EAAA,QACI;AAEjB;AAAC,KA5CuBW,WAAW;AA8CnCU,MAAM,eAAC,QAAC,WAAW;EAAA;EAAA;EAAA;AAAA,QAAG,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}